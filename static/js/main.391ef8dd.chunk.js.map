{"version":3,"sources":["images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","component/ScoreBoard.js","App.js","index.js"],"names":["ScoreBoard","score","className","candyColors","blueCandy","greenCandy","orangeCandy","purpleCandy","redCandy","yellowCandy","App","useState","currColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfFour","i","columnOfFour","width","decidedColor","isBlank","blank","every","square","forEach","checkForColumnOfThree","columnOfThree","checkForRowOfThree","rowOfThree","includes","checkForRowOfFour","rowOfFour","dragStart","e","target","dragDrop","preventDefault","dragEnd","squareBeingReplacedId","parseInt","getAttribute","squareBeingDraggedId","validMove","isAColumnOfFour","isAColumnOfThree","isARowOfFour","isARowOfThree","useEffect","randomColorArrangement","randomColor","Math","floor","random","length","push","createBoard","timer","setInterval","randomNumber","moveIntoSquareBelow","clearInterval","map","candyColor","index","src","alt","draggable","onDragStart","onDragOver","onDragEnter","onDragLeave","onDrop","onDragEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.391ef8dd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import React from \"react\";\r\n\r\nexport default function ScoreBoard({ score }) {\r\n\treturn (\r\n\t\t<div className=\"score-board\">\r\n\t\t\t<h1>Candy Crush</h1>\r\n\t\t\t<h1>Score {score}</h1>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import { useEffect, useState } from \"react\";\n\nimport blueCandy from \"./images/blue-candy.png\";\nimport greenCandy from \"./images/green-candy.png\";\nimport orangeCandy from \"./images/orange-candy.png\";\nimport purpleCandy from \"./images/purple-candy.png\";\nimport redCandy from \"./images/red-candy.png\";\nimport yellowCandy from \"./images/yellow-candy.png\";\nimport blank from \"./images/blank.png\";\nimport ScoreBoard from \"./component/ScoreBoard\";\n\nconst width = 8;\nconst candyColors = [\n\tblueCandy,\n\tgreenCandy,\n\torangeCandy,\n\tpurpleCandy,\n\tredCandy,\n\tyellowCandy,\n];\n\nconst App = () => {\n\tconst [currColorArrangement, setCurrentColorArrangement] = useState([]);\n\tconst [squareBeingDragged, setSquareBeingDragged] = useState(null);\n\tconst [squareBeingReplaced, setSquareBeingReplaced] = useState(null);\n\tconst [scoreDisplay, setScoreDisplay] = useState(0);\n\n\t// check for column of 3 and 4\n\tconst checkForColumnOfFour = () => {\n\t\tfor (let i = 0; i <= 39; i++) {\n\t\t\tconst columnOfFour = [i, i + width, i + width * 2, i + width * 3];\n\t\t\tconst decidedColor = currColorArrangement[i];\n\t\t\tconst isBlank = currColorArrangement[i] === blank;\n\n\t\t\tif (\n\t\t\t\tcolumnOfFour.every(\n\t\t\t\t\t(square) => currColorArrangement[square] === decidedColor\n\t\t\t\t) &&\n\t\t\t\t!isBlank\n\t\t\t) {\n\t\t\t\tsetScoreDisplay((score) => score + 4);\n\t\t\t\tcolumnOfFour.forEach(\n\t\t\t\t\t(square) => (currColorArrangement[square] = blank)\n\t\t\t\t);\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t};\n\n\tconst checkForColumnOfThree = () => {\n\t\tfor (let i = 0; i <= 47; i++) {\n\t\t\tconst columnOfThree = [i, i + width, i + width * 2];\n\t\t\tconst decidedColor = currColorArrangement[i];\n\t\t\tconst isBlank = currColorArrangement[i] === blank;\n\n\t\t\tif (\n\t\t\t\tcolumnOfThree.every(\n\t\t\t\t\t(square) => currColorArrangement[square] === decidedColor\n\t\t\t\t) &&\n\t\t\t\t!isBlank\n\t\t\t) {\n\t\t\t\tsetScoreDisplay((score) => score + 3);\n\n\t\t\t\tcolumnOfThree.forEach(\n\t\t\t\t\t(square) => (currColorArrangement[square] = blank)\n\t\t\t\t);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t};\n\n\tconst checkForRowOfThree = () => {\n\t\tfor (let i = 0; i < 64; i++) {\n\t\t\tconst rowOfThree = [i, i + 1, i + 2];\n\t\t\tconst decidedColor = currColorArrangement[i];\n\t\t\tconst isBlank = currColorArrangement[i] === blank;\n\n\t\t\tconst notValid = [\n\t\t\t\t6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 62, 63,\n\t\t\t];\n\n\t\t\tif (notValid.includes(i)) continue;\n\t\t\tif (\n\t\t\t\trowOfThree.every(\n\t\t\t\t\t(square) => currColorArrangement[square] === decidedColor\n\t\t\t\t) &&\n\t\t\t\t!isBlank\n\t\t\t) {\n\t\t\t\tsetScoreDisplay((score) => score + 3);\n\n\t\t\t\trowOfThree.forEach((square) => (currColorArrangement[square] = blank));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t};\n\n\tconst checkForRowOfFour = () => {\n\t\tfor (let i = 0; i < 64; i++) {\n\t\t\tconst rowOfFour = [i, i + 1, i + 2, i + 3];\n\t\t\tconst decidedColor = currColorArrangement[i];\n\t\t\tconst isBlank = currColorArrangement[i] === blank;\n\n\t\t\tconst notValid = [\n\t\t\t\t5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53,\n\t\t\t\t54, 55, 61, 62, 63,\n\t\t\t];\n\n\t\t\tif (notValid.includes(i)) continue;\n\t\t\tif (\n\t\t\t\trowOfFour.every(\n\t\t\t\t\t(square) => currColorArrangement[square] === decidedColor\n\t\t\t\t) &&\n\t\t\t\t!isBlank\n\t\t\t) {\n\t\t\t\tsetScoreDisplay((score) => score + 4);\n\t\t\t\trowOfFour.forEach((square) => (currColorArrangement[square] = blank));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t};\n\n\tconst moveIntoSquareBelow = () => {\n\t\tfor (let i = 0; i <= 55; i++) {\n\t\t\tconst firstRow = [0, 1, 2, 3, 4, 5, 6, 7];\n\n\t\t\tconst isFirstRow = firstRow.includes(i);\n\n\t\t\tif (isFirstRow && currColorArrangement[i] === blank) {\n\t\t\t\tlet randomNumber = Math.floor(Math.random() * candyColors.length);\n\t\t\t\tcurrColorArrangement[i] = candyColors[randomNumber];\n\t\t\t}\n\n\t\t\tif (currColorArrangement[i + width] === blank) {\n\t\t\t\tcurrColorArrangement[i + width] = currColorArrangement[i];\n\t\t\t\tcurrColorArrangement[i] = blank;\n\t\t\t}\n\t\t}\n\t};\n\n\tconst dragStart = (e) => {\n\t\tsetSquareBeingDragged(e.target);\n\t};\n\tconst dragDrop = (e) => {\n\t\tsetSquareBeingReplaced(e.target);\n\t\te.preventDefault();\n\t};\n\tconst dragEnd = (e) => {\n\t\tconst squareBeingReplacedId = parseInt(\n\t\t\tsquareBeingReplaced.getAttribute(\"data-id\")\n\t\t);\n\t\tconst squareBeingDraggedId = parseInt(\n\t\t\tsquareBeingDragged.getAttribute(\"data-id\")\n\t\t);\n\n\t\tcurrColorArrangement[squareBeingReplacedId] =\n\t\t\tsquareBeingDragged.getAttribute(\"src\");\n\t\tcurrColorArrangement[squareBeingDraggedId] =\n\t\t\tsquareBeingReplaced.getAttribute(\"src\");\n\n\t\tconst validMoves = [\n\t\t\tsquareBeingDraggedId - 1,\n\t\t\tsquareBeingDraggedId - width,\n\t\t\tsquareBeingDraggedId + 1,\n\t\t\tsquareBeingDraggedId + width,\n\t\t];\n\n\t\tconst validMove = validMoves.includes(squareBeingReplacedId);\n\n\t\tconst isAColumnOfFour = checkForColumnOfFour();\n\t\tconst isAColumnOfThree = checkForColumnOfThree();\n\t\tconst isARowOfFour = checkForRowOfFour();\n\t\tconst isARowOfThree = checkForRowOfThree();\n\n\t\tif (\n\t\t\tsquareBeingReplacedId &&\n\t\t\tvalidMove &&\n\t\t\t(isAColumnOfThree || isAColumnOfFour || isARowOfFour || isARowOfThree)\n\t\t) {\n\t\t\tsetSquareBeingDragged(null);\n\t\t\tsetSquareBeingReplaced(null);\n\t\t} else {\n\t\t\tcurrColorArrangement[squareBeingReplacedId] =\n\t\t\t\tsquareBeingReplaced.getAttribute(\"src\");\n\t\t\tcurrColorArrangement[squareBeingDraggedId] =\n\t\t\t\tsquareBeingDragged.getAttribute(\"src\");\n\t\t\tsetCurrentColorArrangement([...currColorArrangement]);\n\t\t}\n\t\te.preventDefault();\n\t};\n\n\t// random color array\n\tconst createBoard = () => {\n\t\tconst randomColorArrangement = [];\n\t\tfor (let i = 0; i < width * width; i++) {\n\t\t\tconst randomColor =\n\t\t\t\tcandyColors[Math.floor(Math.random() * candyColors.length)];\n\t\t\trandomColorArrangement.push(randomColor);\n\t\t}\n\t\tsetCurrentColorArrangement(randomColorArrangement);\n\t};\n\n\tuseEffect(() => {\n\t\tcreateBoard();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tconst timer = setInterval(() => {\n\t\t\tcheckForColumnOfFour();\n\t\t\tcheckForColumnOfThree();\n\t\t\tcheckForRowOfThree();\n\t\t\tcheckForRowOfFour();\n\t\t\tmoveIntoSquareBelow();\n\t\t\tsetCurrentColorArrangement([...currColorArrangement]);\n\t\t}, 100);\n\n\t\treturn () => {\n\t\t\tclearInterval(timer);\n\t\t};\n\t}, [currColorArrangement]);\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"app\">\n\t\t\t\t<div className=\"game\">\n\t\t\t\t\t{currColorArrangement.map((candyColor, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\tsrc={candyColor}\n\t\t\t\t\t\t\t\talt={candyColor}\n\t\t\t\t\t\t\t\tdata-id={index}\n\t\t\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\t\t\tonDragStart={dragStart}\n\t\t\t\t\t\t\t\tonDragOver={(e) => e.preventDefault()}\n\t\t\t\t\t\t\t\tonDragEnter={(e) => e.preventDefault()}\n\t\t\t\t\t\t\t\tonDragLeave={(e) => e.preventDefault()}\n\t\t\t\t\t\t\t\tonDrop={dragDrop}\n\t\t\t\t\t\t\t\tonDragEnd={dragEnd}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t<ScoreBoard score={scoreDisplay} />\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />,\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}